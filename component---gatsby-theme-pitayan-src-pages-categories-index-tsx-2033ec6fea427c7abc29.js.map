{"version":3,"file":"component---gatsby-theme-pitayan-src-pages-categories-index-tsx-2033ec6fea427c7abc29.js","mappings":"uHAQMA,EAA4C,SAAC,GAG5C,IAFLC,EAEI,EAFJA,WACAC,EACI,EADJA,UAEA,OAAKD,GAAeA,EAAWE,OAG7BC,EAAAA,cAAAA,MAAAA,CAAKF,UAAS,wBAA0BA,GACrCD,EAAWI,KAAI,SAACC,EAAkBC,GACjC,OACEH,EAAAA,cAACI,EAAAA,KAAD,CAAMN,UAAU,iBAAiBK,IAAKA,EAAKE,GAAE,eAAiBH,GAC3DA,OAPmCF,EAAAA,cAAAA,EAAAA,SAAAA,OAehD,KAAeM,EAAAA,EAAAA,MAAKV,I,wECNdW,EAA4C,SAAC,GAI5C,IAFOC,EAER,EAHJC,KACEC,OAAUF,MAGJG,GAAYC,EAAAA,EAAAA,MAAZD,QACFd,EAAaW,EAAMP,KAAI,SAACC,GAC5B,OAAOA,EAASW,cAGlB,OACEb,EAAAA,cAACc,EAAAA,EAAD,CAAeC,QAAYJ,EAAL,cAA2BK,UAAU,cACzDhB,EAAAA,cAAAA,KAAAA,CAAIF,UAAU,6FAAd,eACeU,EAAMT,OADrB,KAGAC,EAAAA,cAACJ,EAAAA,EAAD,CAAcE,UAAU,wCAAwCD,WAAYA,MAKlF,WAAeS,EAAAA,EAAAA,MAAKC","sources":["webpack://www/../gatsby-theme-pitayan/src/components/CategoryTags/index.tsx","webpack://www/../gatsby-theme-pitayan/src/pages/categories/index.tsx"],"sourcesContent":["import React, { memo } from \"react\"\nimport { Link } from \"gatsby\"\n\ntype CategoryTagsProps = {\n  categories: string[]\n  className?: string\n}\n\nconst CategoryTags: React.FC<CategoryTagsProps> = ({\n  categories,\n  className\n}) => {\n  if (!categories || !categories.length) return <></>\n\n  return (\n    <div className={`flex flex-wrap gap-3 ${className}`}>\n      {categories.map((category: string, key: number) => {\n        return (\n          <Link className=\"site-tag block\" key={key} to={`/categories/${category}`}>\n            {category}\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default memo(CategoryTags)\n","import React, { memo } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport DefaultLayout from \"@pitayan/gatsby-theme-pitayan/src/layouts/Default\"\nimport CategoryTags from \"@pitayan/gatsby-theme-pitayan/src/components/CategoryTags\"\n\nimport { useSiteMetadata } from \"@pitayan/gatsby-theme-pitayan/src/hooks\"\n\ntype CategoriesGroup = {\n  fieldValue: string\n  totalCount: number\n}\n\ntype CategoriesProps = {\n  data: {\n    allMdx: {\n      group: CategoriesGroup[]\n    }\n  }\n}\n\nconst CategoriesPage: React.FC<CategoriesProps> = ({\n  data: {\n    allMdx: { group },\n  },\n}) => {\n  const { siteUrl } = useSiteMetadata()\n  const categories = group.map((category: any) => {\n    return category.fieldValue\n  })\n\n  return (\n    <DefaultLayout pageUrl={`${siteUrl}/categories`} pageTitle=\"Categories\">\n      <h1 className=\"font-bold font-sans leading-tight md:leading-tight md:text-3xl text-2xl text-center mb-32\">\n        Categories ({group.length})\n      </h1>\n      <CategoryTags className=\"mx-auto mb-32 max-w-lg justify-center\" categories={categories} />\n    </DefaultLayout>\n  )\n}\n\nexport default memo(CategoriesPage)\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(limit: 2000) {\n      group(field: frontmatter___categories) {\n        fieldValue\n        totalCount\n      }\n      totalCount\n    }\n  }\n`\n"],"names":["CategoryTags","categories","className","length","React","map","category","key","Link","to","memo","CategoriesPage","group","data","allMdx","siteUrl","useSiteMetadata","fieldValue","DefaultLayout","pageUrl","pageTitle"],"sourceRoot":""}