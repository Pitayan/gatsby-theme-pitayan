{"version":3,"file":"698-4423a4877555c75e4a63.js","mappings":"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","sources":["webpack://www/../src/components/intersection-observer.ts","webpack://www/../src/components/lazy-hydrate.tsx"],"sourcesContent":["let intersectionObserver: IntersectionObserver\n\nexport type Unobserver = () => void\n\nconst ioEntryMap = new WeakMap<HTMLElement, () => void>()\n/* eslint-disable @typescript-eslint/no-explicit-any  */\nconst connection =\n  (navigator as any).connection ||\n  (navigator as any).mozConnection ||\n  (navigator as any).webkitConnection\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// These match the thresholds used in Chrome's native lazy loading\n// @see https://web.dev/browser-level-image-lazy-loading/#distance-from-viewport-thresholds\nconst FAST_CONNECTION_THRESHOLD = `1250px`\nconst SLOW_CONNECTION_THRESHOLD = `2500px`\n\nexport function createIntersectionObserver(\n  callback: () => void\n): (element: HTMLElement) => Unobserver {\n  const connectionType = connection?.effectiveType\n\n  // if we don't support intersectionObserver we don't lazy load (Sorry IE 11).\n  if (!(`IntersectionObserver` in window)) {\n    return function observe(): Unobserver {\n      callback()\n      return function unobserve(): void {}\n    }\n  }\n\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            // Get the matching entry's callback and call it\n            ioEntryMap.get(entry.target as HTMLElement)?.()\n            // We only need to call it once\n            ioEntryMap.delete(entry.target as HTMLElement)\n          }\n        })\n      },\n      {\n        rootMargin:\n          connectionType === `4g` && !connection?.saveData\n            ? FAST_CONNECTION_THRESHOLD\n            : SLOW_CONNECTION_THRESHOLD,\n      }\n    )\n  }\n\n  return function observe(element: HTMLElement): Unobserver {\n    // Store a reference to the callback mapped to the element being watched\n    ioEntryMap.set(element, callback)\n    intersectionObserver.observe(element)\n\n    return function unobserve(): void {\n      if (intersectionObserver && element) {\n        ioEntryMap.delete(element)\n        intersectionObserver.unobserve(element)\n      }\n    }\n  }\n}\n","import React from \"react\"\nimport { renderToStaticMarkup } from \"react-dom/server\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage } from \"./main-image\"\nimport {\n  hasNativeLazyLoadSupport,\n  getMainProps,\n  getPlaceholderProps,\n} from \"./hooks\"\nimport { createIntersectionObserver } from \"./intersection-observer\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { GatsbyImageProps } from \"./gatsby-image.browser\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean\n}\n\nasync function applyPolyfill(element: HTMLImageElement): Promise<void> {\n  if (!(`objectFitPolyfill` in window)) {\n    await import(\n      // @ts-ignore typescript can't find the module for some reason ¯\\_(ツ)_/¯\n      /* webpackChunkName: \"gatsby-plugin-image-objectfit-polyfill\" */ `objectFitPolyfill`\n    )\n  }\n  ;(window as any).objectFitPolyfill(element)\n}\n\nfunction toggleLoaded(\n  mainImage: HTMLElement,\n  placeholderImage: HTMLElement\n): void {\n  mainImage.style.opacity = `1`\n\n  if (placeholderImage) {\n    placeholderImage.style.opacity = `0`\n  }\n}\n\nfunction startLoading(\n  element: HTMLElement,\n  cacheKey: string,\n  imageCache: Set<string>,\n  onStartLoad: GatsbyImageProps[\"onStartLoad\"],\n  onLoad: GatsbyImageProps[\"onLoad\"],\n  onError: GatsbyImageProps[\"onError\"]\n): () => void {\n  const mainImage = element.querySelector(\n    `[data-main-image]`\n  ) as HTMLImageElement\n  const placeholderImage = element.querySelector<HTMLElement>(\n    `[data-placeholder-image]`\n  )\n  const isCached = imageCache.has(cacheKey)\n\n  function onImageLoaded(e): void {\n    // eslint-disable-next-line @babel/no-invalid-this\n    this.removeEventListener(`load`, onImageLoaded)\n\n    const target = e.currentTarget\n    const img = new Image()\n    img.src = target.currentSrc\n\n    if (img.decode) {\n      // Decode the image through javascript to support our transition\n      img\n        .decode()\n        .then(() => {\n          // eslint-disable-next-line @babel/no-invalid-this\n          toggleLoaded(this, placeholderImage)\n          onLoad?.({\n            wasCached: isCached,\n          })\n        })\n        .catch(e => {\n          // eslint-disable-next-line @babel/no-invalid-this\n          toggleLoaded(this, placeholderImage)\n          onError?.(e)\n        })\n    } else {\n      // eslint-disable-next-line @babel/no-invalid-this\n      toggleLoaded(this, placeholderImage)\n      onLoad?.({\n        wasCached: isCached,\n      })\n    }\n  }\n\n  mainImage.addEventListener(`load`, onImageLoaded)\n\n  onStartLoad?.({\n    wasCached: isCached,\n  })\n  Array.from(mainImage.parentElement.children).forEach(child => {\n    const src = child.getAttribute(`data-src`)\n    const srcSet = child.getAttribute(`data-srcset`)\n    if (src) {\n      child.removeAttribute(`data-src`)\n      child.setAttribute(`src`, src)\n    }\n    if (srcSet) {\n      child.removeAttribute(`data-srcset`)\n      child.setAttribute(`srcset`, srcSet)\n    }\n  })\n\n  imageCache.add(cacheKey)\n\n  // Load times not always fires - mostly when it's a 304\n  // We check if the image is already completed and if so we trigger onload.\n  if (mainImage.complete) {\n    onImageLoaded.call(mainImage, {\n      currentTarget: mainImage,\n    })\n  }\n\n  return (): void => {\n    if (mainImage) {\n      mainImage.removeEventListener(`load`, onImageLoaded)\n    }\n  }\n}\n\nexport function swapPlaceholderImage(\n  element: HTMLElement,\n  cacheKey: string,\n  imageCache: Set<string>,\n  style: React.CSSProperties,\n  onStartLoad: GatsbyImageProps[\"onStartLoad\"],\n  onLoad: GatsbyImageProps[\"onLoad\"],\n  onError: GatsbyImageProps[\"onError\"]\n): () => void {\n  if (!hasNativeLazyLoadSupport()) {\n    let cleanup\n    const io = createIntersectionObserver(() => {\n      cleanup = startLoading(\n        element,\n        cacheKey,\n        imageCache,\n        onStartLoad,\n        onLoad,\n        onError\n      )\n    })\n    const unobserve = io(element)\n\n    // Polyfill \"object-fit\" if unsupported (mostly IE)\n    if (!(`objectFit` in document.documentElement.style)) {\n      element.dataset.objectFit = style.objectFit ?? `cover`\n      element.dataset.objectPosition = `${style.objectPosition ?? `50% 50%`}`\n      applyPolyfill(element as HTMLImageElement)\n    }\n\n    return (): void => {\n      if (cleanup) {\n        cleanup()\n      }\n\n      unobserve()\n    }\n  }\n\n  return startLoading(\n    element,\n    cacheKey,\n    imageCache,\n    onStartLoad,\n    onLoad,\n    onError\n  )\n}\n\nexport function renderImageToString({\n  image,\n  loading = `lazy`,\n  isLoading,\n  isLoaded,\n  imgClassName,\n  imgStyle = {},\n  objectPosition,\n  backgroundColor,\n  objectFit = `cover`,\n  ...props\n}: LazyHydrateProps): string {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  return renderToStaticMarkup(\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<\n          MainImageProps,\n          \"images\" | \"fallback\" | \"onLoad\" | \"onError\"\n        >)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(isLoading, isLoaded, images, loading, imgStyle)}\n      />\n    </LayoutWrapper>\n  )\n}\n"],"names":["intersectionObserver","ioEntryMap","WeakMap","connection","navigator","mozConnection","webkitConnection","_excluded","toggleLoaded","mainImage","placeholderImage","style","opacity","startLoading","element","cacheKey","imageCache","onStartLoad","onLoad","onError","querySelector","has","onImageLoaded","e","this","removeEventListener","currentTarget","img","Image","src","target","currentSrc","decode","then","wasCached","isCached","catch","addEventListener","Array","from","parentElement","children","forEach","child","getAttribute","srcSet","removeAttribute","setAttribute","add","complete","call","hasNativeLazyLoadSupport","cleanup","callback","IntersectionObserver","entries","entry","isIntersecting","get","_ioEntryMap$get","delete","rootMargin","effectiveType","saveData","set","observe","unobserve","io","document","documentElement","dataset","objectFit","_style$objectFit","objectPosition","async","window","import","objectFitPolyfill","renderImageToString","image","loading","isLoading","isLoaded","imgClassName","imgStyle","backgroundColor","_ref","props","_objectWithoutPropertiesLoose","width","height","layout","images","placeholder","wrapperBackgroundColor","React","createElement","getPlaceholderProps","MainImage","className","getMainProps"],"sourceRoot":""}